from random import randint

n = int(input('Введите номер задачи: '))

#Задача 2: Найдите сумму цифр трехзначного числа.
# *Пример:*
# 123 -> 6 (1 + 2 + 3)
# 100 -> 1 (1 + 0 + 0)

if n == 2:
    i = str(input('Введите трехзначное число: '))
    print(int(i[0])+int(i[1])+int(i[2]))

# Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. 
# Вместе они сделали S журавликов. Сколько журавликов сделал каждый ребенок, 
# если известно, что Петя и Сережа сделали одинаковое количество журавликов, 
# а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?
# *Пример:*
# 6 -> 1  4  1
# 24 -> 4  16  4
# 60 -> 10  40  10
if n == 4:
    i = int(input('Введите число: '))
    k = i//3*2
    p = s = (i-k)//2
    print(p, k, s)


# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались
#  за проезд и получали билет с номером. Счастливым билетом называют такой билет с 
# шестизначным номером, где сумма первых трех цифр равна сумме последних трех. 
# Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6. 
# Вам требуется написать программу, которая проверяет счастливость билета.
# *Пример:*
# 385916 -> yes
# 123456 -> no

if n == 6:
    i = str(input('Введите шестизначное число: '))
    if int(i[0])+int(i[1])+int(i[2]) == int(i[3])+int(i[4])+int(i[5]):
        print('yes')
    else:
        print('no')


# Задача 8: Требуется определить, можно ли от шоколадки размером n × m долек отломить k долек, 
# если разрешается сделать один разлом по прямой между дольками 
# 
# (то есть разломить шоколадку на два прямоугольника).
# *Пример:*
# 3 2 4 -> yes
# 3 2 1 -> no

if n == 8:
    i = str(input('Введите трезначное число: '))
    if int(i[2])%int(i[1])==0 or int(i[2])%int(i[0])==0:
        print('yes')
    else:
        print('no')


# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. 
# Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты
#  вверх одной и той же стороной. Выведите минимальное количество монет, которые нужно перевернуть
if n == 10:

    l = [1,0,0,0,0,1,1,1,0,0,0]
    count = 0
    for i in l:
        if i == 0:
            count += 1
    if len(l)-count < count:
        count = len(l)-count
    print(count)
        

# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает 
# Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. 
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. 
# Помогите Кате отгадать задуманные Петей числа.

if n == 12:

    a = int(input('Введите первое число: '))
    b = int(input('Введите второе число: '))

    c = a+b
    d = a*b

    stop = False
    
    for i in range(1,1001):
        for j in range(1,1001):
            if i+j==c and i*j==d:
                print(i,j)
                stop = True
                break
        if stop:
            break

# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

if n == 14:

    m = int(input('Введите число: '))

    t = 2
    stop = True
    l = []
    while stop:
        if t <= m:
            l.append(t)
            t *= 2
        else:
            stop = False
    print(l)


# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. 
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
# В последующих строках записаны N целых чисел Ai. Последняя строка содержит число X
# *Пример:*

# 5
#     1 2 3 4 5
#     3
#     -> 1

if n == 16:

    m = int(input('Введите число элементов в массиве: '))
    x = int(input('Введите число для поиска от 0 до 9: '))

    l = []
    count = 0
    for i in range(m):
        l.append(randint(0, 9))
        if l[i] == x: count += 1

    print(l)
    print(count)


# Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X.
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X
# *Пример:*

# 5
#     1 2 3 4 5
#     6
#     -> 5

if n == 18:

    m = int(input('Введите число элементов в массиве: '))
    x = int(input('Введите число для поиска от 0 до 99: '))

    l = []
    t = 999999999
    result = -1
    for i in range(m):
        l.append(randint(0, 99))
    print(l)
    l = list(set(l))
    print(l)
    for i in range(len(l)):
        p = 0
        if x-l[i] > 0: p = x-l[i]
        else: p = l[i]-x
        if p < t: 
            t = p
            result = l[i]
    print(result)
    

# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.

if n == 22:
    l1, l2, l3 = [], [], []

    l1_len = int(input('Введите число элементов в массиве 1: '))
    for i in range(l1_len):
        l1.append(int(input('Введите число {0} в массиве 1: '.format(i))))
    l2_len = int(input('Введите число элементов в массиве 2: '))
    for i in range(l2_len):
        l2.append(int(input('Введите число {0} в массиве 2: '.format(i))))
    print(l1)
    print(l2)

    l3 = list(set(l1).intersection(set(l2)))
    l3.sort()
    print(l3)


    
    

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, 
# причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — 
# на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать 
# за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.       

# НЕ ПОНЯЛ ЗАДАНИЕ 








# Не выбрали правильную задачу
else:
    print('Нет такой задачи')